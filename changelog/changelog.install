<?php //$Id: changelog_.install, v 1.0 2013/12/06 16:27:13 itinity Exp $


/**
* Implements hook_modules_uninstalled()
*/
function changelog_modules_uninstalled($modules) {
	// Delete changelog events generated by uninstalled modules
	changelog_delete_multiple(NULL, array('module' => $modules,));
}


/**
 * Implements hook_install()
 */
function changelog_install() {
	//
}

/**
 * Implements hook_uninstall()
 */
function changelog_uninstall() {
	//
}

/**
 * Implements hook_schema()
 */
function changelog_schema() {
	$schema = array();
	$schema['changelog'] = array(
		'description' => 'Store actions applied to entities like watchdog',
		'fields' => array(
			'changelog_id' => array(
				'description' => 'Record id.',
				'type' => 'serial',
				'not null' => TRUE,
			),
			'entity_type' => array(
				'description' => 'Type of target entity',
				'type' => 'varchar',
				'length' => '32',
				'not null' => TRUE,
			),
			'entity_id' => array(
				'description' => 'ID of target entity',
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'module' => array(
				'description' => 'Module name that created record.',
				'type' => 'varchar',
				'length' => '64',
				'not null' => TRUE,
			),
			'op' => array(
				'description' => 'Internal module specific id of operation that was applied to entity for recognize/classify own events.',
				'type' => 'varchar',
				'length' => '64',
				'not null' => TRUE,
			),
			'op_params' => array(
				'type' => 'blob',
				'not null' => TRUE,
				'size' => 'big',
				'description' => 'Serialized storage for operation parameters. Can be needed for store module information for entity rollback or other. Optional.',
			),
			'result' => array(
				'description' => 'Operation result value. Optional module specific scalar data type, maxlength is 255.',
				'type' => 'varchar',
				'length' => '255',
				'not null' => TRUE,
			),
			'comment_cid' => array(
				'type' => 'int',
				'not null' => TRUE,
				'default' => 0,
				'description' => 'Relation with {comment}.cid.',
			),
			'created' => array(
				'description' => 'Timestamp',
				'type' => 'int',
				'not null' => TRUE,
			),
			'uid' => array(
				'description' => 'Id of user that created record.',
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'message' => array(
				'description' => 'Message text with placeholders (this will passed to t() function before output)',
				'type' => 'text',
				'not null' => TRUE,
			),
			'message_params' => array(
				'description' => 'Params passed to t() function for rendering message.',
				'type' => 'text',
				'not null' => TRUE,
			),
			'raw_text' => array(
				'description' => 'Additional storage for user comments or other untrusted texts',
				'type' => 'text',
				'not null' => TRUE,
			),
			'hostname' => array(
				'description' => 'User ip address',
				'type' => 'varchar',
				'length' => '128',
				'not null' => TRUE,
			),
		),
		'primary key' => array('changelog_id'),
		'indexes' => array(
			'created' => array('created'),
			'op' => array('op'),
			'result' => array('result'),
			'comment_cid' => array('comment_cid'),
			'entity_id' => array('entity_id'),
			'entity_type' => array('entity_type'),
			'module' => array('module'),
			'uid' => array('uid'),
		),
		'foreign keys' => array(
			'changelog_comment' => array(
				'table' => 'comment',
				'columns' => array('comment_cid' => 'cid'),
			),
		),
	);

	return $schema;
}








